def define_neware_renaming(version_key):
    if version_key == 'v80':
        neware_native = ['DataPoint',
                         'Cycle Index',
                         'Step Index',
                         'Step Type',
                         'Time',
                         'Total Time',
                         'Current(μA)',
                         'Current(mA)',
                         'Voltage(V)',
                         'Capacity(mAh)',
                         'Spec. Cap.(mAh/g)',
                         'Chg. Cap.(mAh)',
                         'Chg. Spec. Cap.(mAh/g)',
                         'DChg. Cap.(mAh)',
                         'DChg. Spec. Cap.(mAh/g)',
                         'Energy(Wh)',
                         'Spec. Energy(mWh/g)',
                         'Chg. Energy(Wh)',
                         'Chg. Spec. Energy(mWh/g)',
                         'DChg. Energy(Wh)',
                         'DChg. Spec. Energy(mWh/g)',
                         'Date',
                         'Power(W)',
                         'dQ/dV(mAh/V)',
                         'dQm/dV(mAh/V.g)',
                         'Contact resistance(mΩ)',
                         'Module start-stop switch',
                         'V1',
                         'V2',
                         'Aux. ΔV',
                         'T1',
                         'T2',
                         'Aux. ΔT',
                         'T1 Aux. Tmax(℃)',
                         'Net DChg. Cap.(mAh)',
                         'V1 Aux. Vmin(V)',
                         'Chg. Oneset Volt.(V)',
                         'Step Number',
                         'V1 Aux. Vmax(V)',
                         'DCIR(mΩ)',
                         'V1 Aux.CH End Volt.(V)',
                         'End Current(mA)',
                         'Chg. Med. Volt.(V)',
                         'Step Time',
                         'End of DChg.Volt.(V)',
                         'End Date',
                         'DChg. Oneset Volt.(V)',
                         'End Voltage(V)',
                         'Super Capacitor(F)',
                         'End of Chg.Volt.(V)',
                         'T1 Aux.CH End T(℃)',
                         'DChg. Med. Volt.(V)',
                         'V1 Aux.CH oneset voltage(V)',
                         'T1 Aux.CH oneset temperature(℃)',
                         'Net DChg. Energy(Wh)',
                         'Oneset Date',
                         'Starting current(mA)',
                         'T1 Aux. Tmin(℃)',
                         'Oneset Volt.(V)',
                         'Cap. Retention(%)',
                         'T1 Maximum temperature of discharging(℃)',
                         'Chg. Time',
                         'Constant Curr. Chg. Cap.(mAh)',
                         'Plat. Cap. Eff.(%)',
                         'DChg. Capacitor(F)',
                         'Plat. Spec. Cap.',
                         'Energy Eff.(%)',
                         'T1 Minimum temperature of charging(℃)',
                         'Med. Volt.(V)',
                         'Constant Curr. Chg. Ratio(%)',
                         'T1 Maximum temperature of charging(℃)',
                         'Chg. Capacitor(F)',
                         'DChg. Time',
                         'Plat. Time',
                         'T1 Minimum temperature of discharging(℃)',
                         'Plat. Cap.(mAh)',
                         'Chg.-DChg. Eff(%)',
                         'arb_step2'
        ]
        local_names = ['measurement',
                       'cyc_step1',
                       'orig_step',
                       'mode',
                       'rel_time',
                       'total_time',
                       'curr',
                       'curr',
                       'volt',
                       'cap',
                       'spec_cap',
                       'chrg_cap',
                       'chrg_spec_cap',
                       'dchg_cap',
                       'dchg_spec_cap',
                       'egy',
                       'spec_egy',
                       'chrg_egy',
                       'chrg_spec_egy',
                       'dchg_egy',
                       'dchg_spec_egy',
                       'abs_time',
                       'pwr',
                       'ica',
                       'ica_spec',
                       'contact_resistance',
                       'module_strt_stop',
                       'aux_volt_1',
                       'aux_volt_2',
                       'aux_dv',
                       'aux_T_1',
                       'aux_T_2',
                       'aux_dT',
                       'T_max',
                       'net_dchg_cap',
                       'aux_V_min',
                       'chrg_strt_volt',
                       'step_nbr',
                       'aux_V_max',
                       'DCIR',
                       'aux_V_fin',
                       'curr_fin',
                       'chg_median_volt',
                       'step_duration',
                       'dchg_volt_fin',
                       'final_date',
                       'dchg_strt_volt',
                       'volt_fin',
                       'super_cap',
                       'dchg_volt_fin',
                       'T_fin',
                       'dchg_median_volt',
                       'aux_V_strt',
                       'T_strt',
                       'net_dchg_egy',
                       'strt_date',
                       'strt_curr',
                       'T_min',
                       'volt_strt',
                       'rel_cap_retention',
                       'T_max_dchg',
                       'chrg_duration',
                       'cnst_curr_chrg_cap',
                       'Plat. Cap. Eff.(%)',
                       'dchg_capacitance',
                       'Plat. Spec. Cap.',
                       'egy_eff',
                       'T_min_chrg',
                       'median_volt',
                       'cnst_curr_chrg_rat',
                       'T_max_chrg',
                       'chrg_capacitance',
                       'dchg_duration',
                       'Plat. Time',
                       'T_min_dchg',
                       'Plat. Cap.(mAh)',
                       'chrg_dchg_eff',
                       'arb_step2'
                       ]
        return dict(zip(neware_native, local_names))
    elif version_key == 'v76':
        neware_native = [
            'Record number',
            'State',
            'Jump',
            'Cycle',
            'Steps',
            'Current(mA)',
            'Current(A)',
            'Voltage(V)',
            'Capacity(mAh)',
            'Energy(mWh)',
            'Relative Time(h:min:s.ms)',
            'Real time(h:min:s.ms)',
            'Auxiliary channel TU1 T(°C)',
            'Auxiliary Δtemperature',
            'Real time',
            'Auxiliary channel TU1 U(V)',
            'Auxiliary Δpressure',
            'End voltage(V)',
            'Chg Eng.(mWh)',
            'Discharge energy(mWh)',
            'Termination current(mA)',
            'DChg cap .(mAh)',
            'Continuous time(h:min:s.ms)',
            'Net discharge capacity(mAh)',
            'Net discharge energy(mWh)',
            'Original step',
            'Starting current(mA)',
            'Channel',
            'Charge Cap.(mAh)',
            'Start Volt(V)',
            'Cycle number',
            'Discharge capacity decay rate(%)',
            'Auxiliary channel TU2 U(V)',
            'Auxiliary channel TU2 T(°C)'
        ]
        local_names = [
            'Measurement',
            'mode',
            'step',
            'arb_step1',
            'arb_step2',
            'curr',
            'curr',
            'volt',
            'cap',
            'step_egy',
            'rel_time',
            'abs_time',
            'temperature',
            'aux_temp',
            'abs_time',
            'aux_volt',
            'aux_dv',
            'end_volt',
            'chg_egy',
            'dchg_egy',
            'fin_curr',
            'dchg_cap',
            'step_duration',
            'net_dchg_cap',
            'net_dchg_egy',
            'orig_step',
            'strt_curr',
            'chnl',
            'chrg_cap',
            'strt_volt',
            'cyc_nbr',
            'dchg_cap_decay',
            'aux_volt_2',
            'aux_temp_2'
        ]
        return dict(zip(neware_native, local_names))
    else:
        print('Unknown neware version, not able to return renaming dictionary.')
        return None